package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type GitignoreGenerator struct{}

func NewGitignoreGenerator() *GitignoreGenerator {
	return &GitignoreGenerator{}
}

// FileExists判断.gitignore文件是否存在
func (g *GitignoreGenerator) FileExists() bool {
	_, err := os.Stat(".gitignore")
	return !os.IsNotExist(err)
}

// Generate将.gitignore模板内容写入到文件
func (g *GitignoreGenerator) Generate(contents [][]byte, names ...string) error {
	file, err := os.Create(".gitignore")
	if err != nil {
		return fmt.Errorf("创建文件失败: %w", err)
	}
	defer file.Close()

	header := fmt.Sprintf(
		"# Generated by iggen\n# Date: %s\n# Templates: %s\n\n",
		time.Now().Format("2006-01-02 15:04:05"),
		strings.Join(names, ", "),
	)
	if _, err := file.WriteString(header); err != nil {
		return err
	}

	for _, content := range contents {
		if _, err := file.Write(append(content, '\n')); err != nil {
			return fmt.Errorf("写入内容失败: %w", err)
		}
	}

	absPath, _ := filepath.Abs(".gitignore")
	fmt.Printf("文件已保存至: %s\n", absPath)
	return nil
}
